{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyN76vRFsPdyXBXWLXJIS9ZU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Import Libraries"],"metadata":{"id":"7nUkVNMGwDMW"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import warnings\n","warnings.filterwarnings('ignore')\n","from google.colab import files\n","# RFC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error, r2_score\n","# PCA\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA"],"metadata":{"id":"24nihsgDwG5J","executionInfo":{"status":"ok","timestamp":1727331520490,"user_tz":-420,"elapsed":474,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}}},"execution_count":50,"outputs":[]},{"cell_type":"markdown","source":["### Upload Files"],"metadata":{"id":"ojz4KLNpwP4z"}},{"cell_type":"code","source":["uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"8A92_I4owRkE","executionInfo":{"status":"ok","timestamp":1727327836103,"user_tz":-420,"elapsed":7287,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"ce5f03c2-aff7-4f01-e2a4-904f4149fd86"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-1bfc31c2-78fb-4b19-a2e5-ec64d34738a9\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-1bfc31c2-78fb-4b19-a2e5-ec64d34738a9\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving PremierLeagueSeason2024.csv to PremierLeagueSeason2024.csv\n"]}]},{"cell_type":"markdown","source":["### Working w Dataset"],"metadata":{"id":"BvlOh5hzwLl-"}},{"cell_type":"code","source":["data = pd.read_csv('PremierLeagueSeason2024.csv')\n","data.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"_ojeazJ3wOJJ","executionInfo":{"status":"ok","timestamp":1727327896593,"user_tz":-420,"elapsed":389,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"4c3367d8-52bd-43bc-931d-26710cf302c6"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                team  goals_scored  goals_conceded  wins  draws  losses  \\\n","0    Manchester City           179              66    55     12       9   \n","1          Liverpool           154              83    44     19      13   \n","2            Arsenal           146              68    46     12      18   \n","3  Manchester United           130             102    39     17      20   \n","4            Chelsea           135              99    37     19      20   \n","5  Tottenham Hotspur           142             106    38     14      24   \n","6        Aston Villa           131             107    36     15      25   \n","7    West Ham United           122             121    33     18      25   \n","8            Everton            87              99    30     17      29   \n","9   Newcastle United           131             124    30     15      31   \n","\n","   points  goal_difference  rank  \n","0     177              113     1  \n","1     151               71     2  \n","2     150               78     3  \n","3     134               28     4  \n","4     130               36     5  \n","5     128               36     6  \n","6     123               24     7  \n","7     117                1     8  \n","8     107              -12     9  \n","9     105                7    10  "],"text/html":["\n","  <div id=\"df-0cfb1898-c5cf-49f3-b77e-7f062de65051\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>team</th>\n","      <th>goals_scored</th>\n","      <th>goals_conceded</th>\n","      <th>wins</th>\n","      <th>draws</th>\n","      <th>losses</th>\n","      <th>points</th>\n","      <th>goal_difference</th>\n","      <th>rank</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Manchester City</td>\n","      <td>179</td>\n","      <td>66</td>\n","      <td>55</td>\n","      <td>12</td>\n","      <td>9</td>\n","      <td>177</td>\n","      <td>113</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Liverpool</td>\n","      <td>154</td>\n","      <td>83</td>\n","      <td>44</td>\n","      <td>19</td>\n","      <td>13</td>\n","      <td>151</td>\n","      <td>71</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Arsenal</td>\n","      <td>146</td>\n","      <td>68</td>\n","      <td>46</td>\n","      <td>12</td>\n","      <td>18</td>\n","      <td>150</td>\n","      <td>78</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Manchester United</td>\n","      <td>130</td>\n","      <td>102</td>\n","      <td>39</td>\n","      <td>17</td>\n","      <td>20</td>\n","      <td>134</td>\n","      <td>28</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Chelsea</td>\n","      <td>135</td>\n","      <td>99</td>\n","      <td>37</td>\n","      <td>19</td>\n","      <td>20</td>\n","      <td>130</td>\n","      <td>36</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Tottenham Hotspur</td>\n","      <td>142</td>\n","      <td>106</td>\n","      <td>38</td>\n","      <td>14</td>\n","      <td>24</td>\n","      <td>128</td>\n","      <td>36</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Aston Villa</td>\n","      <td>131</td>\n","      <td>107</td>\n","      <td>36</td>\n","      <td>15</td>\n","      <td>25</td>\n","      <td>123</td>\n","      <td>24</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>West Ham United</td>\n","      <td>122</td>\n","      <td>121</td>\n","      <td>33</td>\n","      <td>18</td>\n","      <td>25</td>\n","      <td>117</td>\n","      <td>1</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Everton</td>\n","      <td>87</td>\n","      <td>99</td>\n","      <td>30</td>\n","      <td>17</td>\n","      <td>29</td>\n","      <td>107</td>\n","      <td>-12</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Newcastle United</td>\n","      <td>131</td>\n","      <td>124</td>\n","      <td>30</td>\n","      <td>15</td>\n","      <td>31</td>\n","      <td>105</td>\n","      <td>7</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cfb1898-c5cf-49f3-b77e-7f062de65051')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0cfb1898-c5cf-49f3-b77e-7f062de65051 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0cfb1898-c5cf-49f3-b77e-7f062de65051');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f44935e1-b576-4913-ab35-a4789042e9b5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f44935e1-b576-4913-ab35-a4789042e9b5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f44935e1-b576-4913-ab35-a4789042e9b5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"Everton\",\n          \"Leeds United\",\n          \"Manchester City\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_scored\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 35,\n        \"max\": 179,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          62,\n          98,\n          179\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_conceded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 50,\n        \"max\": 167,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          66,\n          167,\n          67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wins\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 5,\n        \"max\": 55,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          55,\n          9,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draws\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 5,\n        \"max\": 26,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          6,\n          9,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"losses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 9,\n        \"max\": 57,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          9,\n          13,\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44,\n        \"min\": 26,\n        \"max\": 177,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          177,\n          75,\n          107\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goal_difference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47,\n        \"min\": -112,\n        \"max\": 113,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          113,\n          18,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 24,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          9,\n          17,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"NBjhhog3xLXv","executionInfo":{"status":"ok","timestamp":1727327947658,"user_tz":-420,"elapsed":396,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"d8153b85-20dd-48c5-bc1b-4e0d73529c4e"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       goals_scored  goals_conceded       wins      draws     losses  \\\n","count     24.000000       24.000000  24.000000  24.000000  24.000000   \n","mean      94.583333       94.583333  24.791667  13.750000  24.791667   \n","std       41.041778       29.057539  13.931444   5.358861  10.794440   \n","min       35.000000       50.000000   5.000000   5.000000   9.000000   \n","25%       55.750000       67.750000  12.750000   9.000000  18.750000   \n","50%       86.500000       99.000000  23.000000  14.500000  23.000000   \n","75%      131.000000      114.750000  36.250000  18.000000  29.500000   \n","max      179.000000      167.000000  55.000000  26.000000  57.000000   \n","\n","           points  goal_difference       rank  \n","count   24.000000        24.000000  24.000000  \n","mean    88.125000         0.000000  12.500000  \n","std     44.184704        47.120567   7.071068  \n","min     26.000000      -112.000000   1.000000  \n","25%     46.750000       -27.250000   6.750000  \n","50%     90.000000       -10.500000  12.500000  \n","75%    124.250000        25.000000  18.250000  \n","max    177.000000       113.000000  24.000000  "],"text/html":["\n","  <div id=\"df-2d06d87f-8fd2-4db3-8648-008daad3bc63\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>goals_scored</th>\n","      <th>goals_conceded</th>\n","      <th>wins</th>\n","      <th>draws</th>\n","      <th>losses</th>\n","      <th>points</th>\n","      <th>goal_difference</th>\n","      <th>rank</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","      <td>24.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>94.583333</td>\n","      <td>94.583333</td>\n","      <td>24.791667</td>\n","      <td>13.750000</td>\n","      <td>24.791667</td>\n","      <td>88.125000</td>\n","      <td>0.000000</td>\n","      <td>12.500000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>41.041778</td>\n","      <td>29.057539</td>\n","      <td>13.931444</td>\n","      <td>5.358861</td>\n","      <td>10.794440</td>\n","      <td>44.184704</td>\n","      <td>47.120567</td>\n","      <td>7.071068</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>35.000000</td>\n","      <td>50.000000</td>\n","      <td>5.000000</td>\n","      <td>5.000000</td>\n","      <td>9.000000</td>\n","      <td>26.000000</td>\n","      <td>-112.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>55.750000</td>\n","      <td>67.750000</td>\n","      <td>12.750000</td>\n","      <td>9.000000</td>\n","      <td>18.750000</td>\n","      <td>46.750000</td>\n","      <td>-27.250000</td>\n","      <td>6.750000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>86.500000</td>\n","      <td>99.000000</td>\n","      <td>23.000000</td>\n","      <td>14.500000</td>\n","      <td>23.000000</td>\n","      <td>90.000000</td>\n","      <td>-10.500000</td>\n","      <td>12.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>131.000000</td>\n","      <td>114.750000</td>\n","      <td>36.250000</td>\n","      <td>18.000000</td>\n","      <td>29.500000</td>\n","      <td>124.250000</td>\n","      <td>25.000000</td>\n","      <td>18.250000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>179.000000</td>\n","      <td>167.000000</td>\n","      <td>55.000000</td>\n","      <td>26.000000</td>\n","      <td>57.000000</td>\n","      <td>177.000000</td>\n","      <td>113.000000</td>\n","      <td>24.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d06d87f-8fd2-4db3-8648-008daad3bc63')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2d06d87f-8fd2-4db3-8648-008daad3bc63 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2d06d87f-8fd2-4db3-8648-008daad3bc63');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-76057b3d-4624-4953-aa19-d5be5f0926ee\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76057b3d-4624-4953-aa19-d5be5f0926ee')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-76057b3d-4624-4953-aa19-d5be5f0926ee button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"goals_scored\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.34231874418939,\n        \"min\": 24.0,\n        \"max\": 179.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          94.58333333333333,\n          86.5,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goals_conceded\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.998093923926895,\n        \"min\": 24.0,\n        \"max\": 167.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          94.58333333333333,\n          99.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wins\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.587085450363698,\n        \"min\": 5.0,\n        \"max\": 55.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          24.791666666666668,\n          23.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"draws\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.92242565988653,\n        \"min\": 5.0,\n        \"max\": 26.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.75,\n          14.5,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"losses\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.855987583182296,\n        \"min\": 9.0,\n        \"max\": 57.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          24.791666666666668,\n          23.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"points\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.3518142698355,\n        \"min\": 24.0,\n        \"max\": 177.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          88.125,\n          90.0,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goal_difference\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64.52746070932989,\n        \"min\": -112.0,\n        \"max\": 113.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          -10.5,\n          24.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.347292731832532,\n        \"min\": 1.0,\n        \"max\": 24.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          24.0,\n          12.5,\n          18.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["### Plotting"],"metadata":{"id":"bicAHY8FxdFt"}},{"cell_type":"code","source":["plt.figure(figsize=(10,6))\n","sns.scatterplot(data = data, x ='goals_scored', y='goals_conceded', hue='rank', palette='viridis', s=100)\n","plt.title('Goals Score vs Goals Conceded')\n","plt.xlabel('Goals Score')\n","plt.ylabel('Goals Conceded')\n","plt.legend(title='rank')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"sJQ_7dhAxeu4","executionInfo":{"status":"ok","timestamp":1727328228153,"user_tz":-420,"elapsed":1092,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"b8289d0e-8fef-480a-ce9b-8ee14d008c14"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Predicting Rank based on Goals Scored and Goals Conceded"],"metadata":{"id":"jvMCzKjty6c0"}},{"cell_type":"code","source":["X = data[['goals_scored', 'goals_conceded']]\n","y = data['rank']\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=42)\n","\n","model = RandomForestClassifier()\n","model.fit(X_train, y_train)\n","\n","y_pred = model.predict(X_test)\n","print(f'Test : {y_test.values}')\n","print(f'Pred : {y_pred}')\n","# Calculate prediction accuracy\n","mse = mean_squared_error(y_test, y_pred)\n","print(f'Mean Squared Error: {mse}')\n","r2 = r2_score(y_test, y_pred)\n","print(f'R-squared: {r2}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZpyezxQNzFPq","executionInfo":{"status":"ok","timestamp":1727332387252,"user_tz":-420,"elapsed":826,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"a59294a7-d135-405b-85bc-c7065f9b1447"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["Test : [ 9 17  1 19 12 10 14  2]\n","Pred : [13 15  3 22 13 11 13  3]\n","Mean Squared Error: 4.625\n","R-squared: 0.8741496598639455\n"]}]},{"cell_type":"markdown","source":["## Now try a lil bit w PCA then run again"],"metadata":{"id":"fxDUdLMy1ytV"}},{"cell_type":"code","source":["pls = data.rename(columns={'team': 'team', 'goals_scored':'gs', 'goals_conceded':'gc', 'wins':'w', 'draws':'d','losses':'l', 'points': 'p', 'goal_difference': 'gd', 'rank':'r'})\n","pls.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"wklYrjxs1yd0","executionInfo":{"status":"ok","timestamp":1727329595157,"user_tz":-420,"elapsed":428,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"d2b3f789-320e-4d54-a9ac-2ff5246105cd"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                team   gs   gc   w   d   l    p   gd  r\n","0    Manchester City  179   66  55  12   9  177  113  1\n","1          Liverpool  154   83  44  19  13  151   71  2\n","2            Arsenal  146   68  46  12  18  150   78  3\n","3  Manchester United  130  102  39  17  20  134   28  4\n","4            Chelsea  135   99  37  19  20  130   36  5"],"text/html":["\n","  <div id=\"df-d3ac0f27-bbf8-439b-8115-fc80df47b40f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>team</th>\n","      <th>gs</th>\n","      <th>gc</th>\n","      <th>w</th>\n","      <th>d</th>\n","      <th>l</th>\n","      <th>p</th>\n","      <th>gd</th>\n","      <th>r</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Manchester City</td>\n","      <td>179</td>\n","      <td>66</td>\n","      <td>55</td>\n","      <td>12</td>\n","      <td>9</td>\n","      <td>177</td>\n","      <td>113</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Liverpool</td>\n","      <td>154</td>\n","      <td>83</td>\n","      <td>44</td>\n","      <td>19</td>\n","      <td>13</td>\n","      <td>151</td>\n","      <td>71</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Arsenal</td>\n","      <td>146</td>\n","      <td>68</td>\n","      <td>46</td>\n","      <td>12</td>\n","      <td>18</td>\n","      <td>150</td>\n","      <td>78</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Manchester United</td>\n","      <td>130</td>\n","      <td>102</td>\n","      <td>39</td>\n","      <td>17</td>\n","      <td>20</td>\n","      <td>134</td>\n","      <td>28</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Chelsea</td>\n","      <td>135</td>\n","      <td>99</td>\n","      <td>37</td>\n","      <td>19</td>\n","      <td>20</td>\n","      <td>130</td>\n","      <td>36</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3ac0f27-bbf8-439b-8115-fc80df47b40f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d3ac0f27-bbf8-439b-8115-fc80df47b40f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d3ac0f27-bbf8-439b-8115-fc80df47b40f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ce4336d4-c2fc-4145-b9f1-7302b1fff893\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce4336d4-c2fc-4145-b9f1-7302b1fff893')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ce4336d4-c2fc-4145-b9f1-7302b1fff893 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"pls","summary":"{\n  \"name\": \"pls\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          \"Everton\",\n          \"Leeds United\",\n          \"Manchester City\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 35,\n        \"max\": 179,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          62,\n          98,\n          179\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 50,\n        \"max\": 167,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          66,\n          167,\n          67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 5,\n        \"max\": 55,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          55,\n          9,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 5,\n        \"max\": 26,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          6,\n          9,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 9,\n        \"max\": 57,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          9,\n          13,\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44,\n        \"min\": 26,\n        \"max\": 177,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          177,\n          75,\n          107\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47,\n        \"min\": -112,\n        \"max\": 113,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          113,\n          18,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 24,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          9,\n          17,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["pls.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZM63okPE6Bxh","executionInfo":{"status":"ok","timestamp":1727330267278,"user_tz":-420,"elapsed":395,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"56435f5d-39b5-4d85-bb9a-11d4e0e6cd5c"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 24 entries, 0 to 23\n","Data columns (total 9 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   team    24 non-null     object\n"," 1   gs      24 non-null     int64 \n"," 2   gc      24 non-null     int64 \n"," 3   w       24 non-null     int64 \n"," 4   d       24 non-null     int64 \n"," 5   l       24 non-null     int64 \n"," 6   p       24 non-null     int64 \n"," 7   gd      24 non-null     int64 \n"," 8   r       24 non-null     int64 \n","dtypes: int64(8), object(1)\n","memory usage: 1.8+ KB\n"]}]},{"cell_type":"code","source":["pls_standardlized = pls.drop(columns='team')\n","pls_standardlized.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"H02PeAe868Jv","executionInfo":{"status":"ok","timestamp":1727330553138,"user_tz":-420,"elapsed":436,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"a8dcac5e-05dd-4a50-d8bb-0609344fe04f"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    gs   gc   w   d   l    p   gd   r\n","0  179   66  55  12   9  177  113   1\n","1  154   83  44  19  13  151   71   2\n","2  146   68  46  12  18  150   78   3\n","3  130  102  39  17  20  134   28   4\n","4  135   99  37  19  20  130   36   5\n","5  142  106  38  14  24  128   36   6\n","6  131  107  36  15  25  123   24   7\n","7  122  121  33  18  25  117    1   8\n","8   87   99  30  17  29  107  -12   9\n","9  131  124  30  15  31  105    7  10"],"text/html":["\n","  <div id=\"df-d005b8ee-c0a1-4531-96ea-6af2822cfa04\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gs</th>\n","      <th>gc</th>\n","      <th>w</th>\n","      <th>d</th>\n","      <th>l</th>\n","      <th>p</th>\n","      <th>gd</th>\n","      <th>r</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>179</td>\n","      <td>66</td>\n","      <td>55</td>\n","      <td>12</td>\n","      <td>9</td>\n","      <td>177</td>\n","      <td>113</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>154</td>\n","      <td>83</td>\n","      <td>44</td>\n","      <td>19</td>\n","      <td>13</td>\n","      <td>151</td>\n","      <td>71</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>146</td>\n","      <td>68</td>\n","      <td>46</td>\n","      <td>12</td>\n","      <td>18</td>\n","      <td>150</td>\n","      <td>78</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>130</td>\n","      <td>102</td>\n","      <td>39</td>\n","      <td>17</td>\n","      <td>20</td>\n","      <td>134</td>\n","      <td>28</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>135</td>\n","      <td>99</td>\n","      <td>37</td>\n","      <td>19</td>\n","      <td>20</td>\n","      <td>130</td>\n","      <td>36</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>142</td>\n","      <td>106</td>\n","      <td>38</td>\n","      <td>14</td>\n","      <td>24</td>\n","      <td>128</td>\n","      <td>36</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>131</td>\n","      <td>107</td>\n","      <td>36</td>\n","      <td>15</td>\n","      <td>25</td>\n","      <td>123</td>\n","      <td>24</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>122</td>\n","      <td>121</td>\n","      <td>33</td>\n","      <td>18</td>\n","      <td>25</td>\n","      <td>117</td>\n","      <td>1</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>87</td>\n","      <td>99</td>\n","      <td>30</td>\n","      <td>17</td>\n","      <td>29</td>\n","      <td>107</td>\n","      <td>-12</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>131</td>\n","      <td>124</td>\n","      <td>30</td>\n","      <td>15</td>\n","      <td>31</td>\n","      <td>105</td>\n","      <td>7</td>\n","      <td>10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d005b8ee-c0a1-4531-96ea-6af2822cfa04')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d005b8ee-c0a1-4531-96ea-6af2822cfa04 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d005b8ee-c0a1-4531-96ea-6af2822cfa04');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cf70ffde-02ef-4a08-a0a3-c0e9f87f4a85\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf70ffde-02ef-4a08-a0a3-c0e9f87f4a85')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cf70ffde-02ef-4a08-a0a3-c0e9f87f4a85 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"pls_standardlized","summary":"{\n  \"name\": \"pls_standardlized\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"gs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 35,\n        \"max\": 179,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          62,\n          98,\n          179\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 50,\n        \"max\": 167,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          66,\n          167,\n          67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 5,\n        \"max\": 55,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          55,\n          9,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 5,\n        \"max\": 26,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          6,\n          9,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 9,\n        \"max\": 57,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          9,\n          13,\n          33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44,\n        \"min\": 26,\n        \"max\": 177,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          177,\n          75,\n          107\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47,\n        \"min\": -112,\n        \"max\": 113,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          113,\n          18,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 1,\n        \"max\": 24,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          9,\n          17,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["pls_standardlized.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rnr144je9HIm","executionInfo":{"status":"ok","timestamp":1727331089209,"user_tz":-420,"elapsed":403,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"e93cbc07-a76a-47ce-8717-a155e79957eb"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['gs', 'gc', 'w', 'd', 'l', 'p', 'gd', 'r'], dtype='object')"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["input_cols = pls_standardlized.columns[:-1]\n","target_col = pls_standardlized.columns[-1]\n","input_cols"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uo4_Ib6Y9NwN","executionInfo":{"status":"ok","timestamp":1727331965735,"user_tz":-420,"elapsed":430,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"a7143c3d-9fe6-471e-e4fb-4412ca059592"},"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['gs', 'gc', 'w', 'd', 'l', 'p', 'gd'], dtype='object')"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["input_df = pls_standardlized[list(input_cols)].copy()\n","input_df.sample(5)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"uY5clbZY9YYX","executionInfo":{"status":"ok","timestamp":1727331969753,"user_tz":-420,"elapsed":534,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"ad1c9546-2b0e-4332-a7c6-36424df0b838"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gs   gc   w   d   l    p   gd\n","4   135   99  37  19  20  130   36\n","0   179   66  55  12   9  177  113\n","3   130  102  39  17  20  134   28\n","9   131  124  30  15  31  105    7\n","13   82  114  18  21  37   75  -32"],"text/html":["\n","  <div id=\"df-0ae02ac7-7518-424f-a20c-7f0a9cf51cf2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gs</th>\n","      <th>gc</th>\n","      <th>w</th>\n","      <th>d</th>\n","      <th>l</th>\n","      <th>p</th>\n","      <th>gd</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>135</td>\n","      <td>99</td>\n","      <td>37</td>\n","      <td>19</td>\n","      <td>20</td>\n","      <td>130</td>\n","      <td>36</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>179</td>\n","      <td>66</td>\n","      <td>55</td>\n","      <td>12</td>\n","      <td>9</td>\n","      <td>177</td>\n","      <td>113</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>130</td>\n","      <td>102</td>\n","      <td>39</td>\n","      <td>17</td>\n","      <td>20</td>\n","      <td>134</td>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>131</td>\n","      <td>124</td>\n","      <td>30</td>\n","      <td>15</td>\n","      <td>31</td>\n","      <td>105</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>82</td>\n","      <td>114</td>\n","      <td>18</td>\n","      <td>21</td>\n","      <td>37</td>\n","      <td>75</td>\n","      <td>-32</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ae02ac7-7518-424f-a20c-7f0a9cf51cf2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0ae02ac7-7518-424f-a20c-7f0a9cf51cf2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0ae02ac7-7518-424f-a20c-7f0a9cf51cf2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-aa798962-9525-47a5-86f3-de8bcc521d74\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aa798962-9525-47a5-86f3-de8bcc521d74')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-aa798962-9525-47a5-86f3-de8bcc521d74 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"input_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"gs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34,\n        \"min\": 82,\n        \"max\": 179,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          179,\n          82,\n          130\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 66,\n        \"max\": 124,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          66,\n          114,\n          102\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 55,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          55,\n          18,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 12,\n        \"max\": 21,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          12,\n          21,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 9,\n        \"max\": 37,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          9,\n          37,\n          20\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37,\n        \"min\": 75,\n        \"max\": 177,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          177,\n          75,\n          134\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53,\n        \"min\": -32,\n        \"max\": 113,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          113,\n          -32,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["target_df = pls_standardlized[list(target_col)].copy()\n","target_df.sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"1vGRQhjg9pXM","executionInfo":{"status":"ok","timestamp":1727331223572,"user_tz":-420,"elapsed":458,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"61bdfd4f-ebaa-4b25-ca90-24f034a66997"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     r\n","14  15\n","0    1\n","7    8\n","23  24\n","6    7"],"text/html":["\n","  <div id=\"df-60690933-bfd8-4853-8977-c2aa8f97f3fa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>r</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>14</th>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-60690933-bfd8-4853-8977-c2aa8f97f3fa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-60690933-bfd8-4853-8977-c2aa8f97f3fa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-60690933-bfd8-4853-8977-c2aa8f97f3fa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9a3cd944-27dd-4fee-8d38-c80e51ddadd2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a3cd944-27dd-4fee-8d38-c80e51ddadd2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9a3cd944-27dd-4fee-8d38-c80e51ddadd2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"target_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"r\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1,\n        \"max\": 24,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          7,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["scaler = StandardScaler()\n","scaler.fit(input_df)\n","input_df = pd.DataFrame(scaler.transform(input_df), columns=input_cols)\n","input_df[input_cols].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"IBE145ot9xvT","executionInfo":{"status":"ok","timestamp":1727332095489,"user_tz":-420,"elapsed":6,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"f1d16aa8-1e01-4f32-93f6-7d2ee36c805b"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         gs        gc         w         d         l         p        gd\n","0  2.101086 -1.004837  2.214993 -0.333586 -1.494409  2.054704  2.449682\n","1  1.478849 -0.407208  1.408430  1.000757 -1.115878  1.453610  1.539180\n","2  1.279733 -0.934528  1.555078 -0.333586 -0.642714  1.430490  1.690931\n","3  0.881502  0.260730  1.041810  0.619516 -0.453449  1.060586  0.607001\n","4  1.005949  0.155266  0.895163  1.000757 -0.453449  0.968110  0.780430"],"text/html":["\n","  <div id=\"df-b0f072ed-bb8a-4a39-b0a7-c3a463e123f0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gs</th>\n","      <th>gc</th>\n","      <th>w</th>\n","      <th>d</th>\n","      <th>l</th>\n","      <th>p</th>\n","      <th>gd</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.101086</td>\n","      <td>-1.004837</td>\n","      <td>2.214993</td>\n","      <td>-0.333586</td>\n","      <td>-1.494409</td>\n","      <td>2.054704</td>\n","      <td>2.449682</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.478849</td>\n","      <td>-0.407208</td>\n","      <td>1.408430</td>\n","      <td>1.000757</td>\n","      <td>-1.115878</td>\n","      <td>1.453610</td>\n","      <td>1.539180</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.279733</td>\n","      <td>-0.934528</td>\n","      <td>1.555078</td>\n","      <td>-0.333586</td>\n","      <td>-0.642714</td>\n","      <td>1.430490</td>\n","      <td>1.690931</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.881502</td>\n","      <td>0.260730</td>\n","      <td>1.041810</td>\n","      <td>0.619516</td>\n","      <td>-0.453449</td>\n","      <td>1.060586</td>\n","      <td>0.607001</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.005949</td>\n","      <td>0.155266</td>\n","      <td>0.895163</td>\n","      <td>1.000757</td>\n","      <td>-0.453449</td>\n","      <td>0.968110</td>\n","      <td>0.780430</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0f072ed-bb8a-4a39-b0a7-c3a463e123f0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b0f072ed-bb8a-4a39-b0a7-c3a463e123f0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b0f072ed-bb8a-4a39-b0a7-c3a463e123f0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6a3d259e-495e-47f6-a752-554e323ea250\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a3d259e-495e-47f6-a752-554e323ea250')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6a3d259e-495e-47f6-a752-554e323ea250 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"input_df[input_cols]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"gs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.48050203686661364,\n        \"min\": 0.8815018348562144,\n        \"max\": 2.101085549904342,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.4788489605940727,\n          1.0059491527182682,\n          1.2797332520147866\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.590661019621151,\n        \"min\": -1.0048372948737265,\n        \"max\": 0.2607303768039698,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -0.407208116581481,\n          0.15526640416416185,\n          -0.934527979780521\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"w\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5169204921116775,\n        \"min\": 0.895162608978807,\n        \"max\": 2.2149928037871502,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.4084299069598292,\n          0.895162608978807,\n          1.5550777063829784\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6793147903628723,\n        \"min\": -0.3335855719871612,\n        \"max\": 1.0007567159614836,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -0.3335855719871612,\n          1.0007567159614836,\n          0.6195160622618708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"l\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4587494230314999,\n        \"min\": -1.4944093226280344,\n        \"max\": -0.45344873905599986,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -1.1158782013291129,\n          -0.45344873905599986,\n          -1.4944093226280344\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4283577781961267,\n        \"min\": 0.9681097090643005,\n        \"max\": 2.054704486999157,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.453609503460726,\n          0.9681097090643005,\n          1.4304904656323247\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gd\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7445896338784863,\n        \"min\": 0.6070007495250915,\n        \"max\": 2.4496815962976908,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.5391804720100537,\n          0.7804295351036892,\n          1.6909306593913267\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":65}]},{"cell_type":"markdown","source":["## Now rebuild model using this dataset"],"metadata":{"id":"-PsrutA0BNPb"}},{"cell_type":"code","source":["X2 = input_df[input_cols]\n","y2 = target_df\n","X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=.3, random_state=42)\n","\n","model2 = RandomForestClassifier(n_estimators=100)\n","model2.fit(X2_train, y2_train)\n","\n","y2_pred = model2.predict(X2_test)\n","print(f'Test : {y2_test.values.T}')\n","print(f'Pred : {y2_pred}')\n","\n","#Calculate accuracy\n","mse = mean_squared_error(y2_test, y2_pred)\n","print(f'Mean Squared Error: {mse}')\n","r2 = r2_score(y2_test, y2_pred)\n","print(f'R-squared: {r2}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2JJ3NsgDBgne","executionInfo":{"status":"ok","timestamp":1727332627789,"user_tz":-420,"elapsed":833,"user":{"displayName":"Dang Phu","userId":"08332791344558427273"}},"outputId":"403620d3-096e-4179-d215-abed35ab16c3"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["Test : [[ 9 17  1 19 12 10 14  2]]\n","Pred : [ 8 15  3 22 11  8 11  3]\n","Mean Squared Error: 4.125\n","R-squared: 0.8877551020408163\n"]}]},{"cell_type":"markdown","source":["#### Compare w no PCA\n","##### Test : [ 9 17  1 19 12 10 14  2]\n","##### Pred : [13 15  3 22 13 11 13  3]\n","##### Mean Squared Error: 4.625\n","##### R-squared: 0.8741496598639455"],"metadata":{"id":"zUWPMI3eDKRO"}},{"cell_type":"markdown","source":[],"metadata":{"id":"95Y8xU-Dv_rY"}}]}